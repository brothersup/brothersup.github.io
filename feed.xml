<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://brothersup.github.io/</id><title>내꿈은 개발왕^^</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-12-12T02:20:51+09:00</updated> <author> <name>Hyeongsup Shin</name> <uri>https://brothersup.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://brothersup.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://brothersup.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Hyeongsup Shin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>3. jenkins를 활용해서 spring boot 프로젝트 빌드하기</title><link href="https://brothersup.github.io/posts/5/" rel="alternate" type="text/html" title="3. jenkins를 활용해서 spring boot 프로젝트 빌드하기" /><published>2022-12-12T02:11:00+09:00</published> <updated>2022-12-12T02:11:00+09:00</updated> <id>https://brothersup.github.io/posts/5/</id> <content src="https://brothersup.github.io/posts/5/" /> <author> <name>{"name"=>"신형섭", "link"=>"https://github.com/brothersup"}</name> </author> <category term="study" /> <category term="CI/CD" /> <summary> jenkins를 활용해서 spring boot 프로젝트 빌드하기 이번 포스팅에서는 깃허브 저장소에서 내려받은 스프링 부트 프로젝트를 gradle로 빌드해볼 예정입니다. 지난번 생성한 저장소에 엄청 간단한 기능(http://localhost:8080 로 접속하면 화면에 hello를 띄우는 코드)뿐인 프로젝트를 push했고 이 부분은 포스팅하려는 내용과는 별 상관없어 보여서 생략했습니다. 그리고 그냥 혼자 정리하는 노트 느낌으로 반말로 작성했었으나 이번 포스팅부터는 높임말을 사용해서 작성하도록 하겠습니다 ㅎㅎ 1. jenkins gradle 플러그인 설치 Jenkins 관리 &amp;gt; 플러그인 관리 페이지에 들어가서 Gradle Plugin을 설치합니다. 제 젠킨스 서버는 이미 설치가 되어있었습니다.... </summary> </entry> <entry><title>2. github-jenkins 연동</title><link href="https://brothersup.github.io/posts/4/" rel="alternate" type="text/html" title="2. github-jenkins 연동" /><published>2022-12-11T03:45:00+09:00</published> <updated>2022-12-12T02:20:20+09:00</updated> <id>https://brothersup.github.io/posts/4/</id> <content src="https://brothersup.github.io/posts/4/" /> <author> <name>{"name"=>"신형섭", "link"=>"https://github.com/brothersup"}</name> </author> <category term="study" /> <category term="CI/CD" /> <summary> 깃허브와 젠킨스 연동 지난 포스팅에서 도커를 설치하고 도커를 사용해서 젠킨스 서버를 띄웠다.(지난포스팅 참고) 이번에는 젠킨스와 깃허브를 연동할 예정이다. 1. 권한 설정 1-1. 깃허브 토큰 발급 오른쪽 위에 있는 프로파일 이미지를 클릭하면 메뉴가 나오는데 여기서 Settings를 클릭한다. 왼쪽 메뉴 중 Developer settings 에 들어간 다음 Personal access tokens &amp;gt; Tokens (classic) 메뉴를 선택한다. Generate new token (classic) 을 클릭해서 토큰을 생성하는 페이지로 들어간다. Note를 입력하고 Expiration을 선택한 다음 Select scopes 에서 repo, admin:repo_hook를 선택한다. 노... </summary> </entry> <entry><title>1. Jenkins 설치</title><link href="https://brothersup.github.io/posts/3/" rel="alternate" type="text/html" title="1. Jenkins 설치" /><published>2022-11-27T16:43:00+09:00</published> <updated>2022-11-27T16:43:00+09:00</updated> <id>https://brothersup.github.io/posts/3/</id> <content src="https://brothersup.github.io/posts/3/" /> <author> <name>{"name"=>"신형섭", "link"=>"https://github.com/brothersup"}</name> </author> <category term="study" /> <category term="CI/CD" /> <summary> 최근에 회사에서 젠킨스와 깃랩 저장소를 연동해서 특정 브랜치에 push나 merge 이벤트가 발생하면 빌드를 하고 원격서버에 배포하는 파이프라인을 만들었는데 만든김에 기억날때 정리하려고 한다. 예전에 aws code deploy와 bitbucket의 저장소를 연동해서 푸쉬하면 인스턴스에 자동으로 빌드하고 배포하도록 했었는데 그때와 비슷한 것 같았다. 회사에서는 깃랩을 사용했지만 포스팅은 깃허브를 사용할 예정이고 포스팅이 길어질 것 같아서 나눠서 쓸 예정이다. 이번 포스팅에서는 도커를 사용해서 젠킨스를 설치하고 기본설정까지 기록할 예정이다. 깃허브의 저장소와 젠킨스를 연동 &amp;gt; 저장소의 특정 브랜치에 이벤트가 발생하면 저장소로부터 코드를 내려받음 &amp;gt; 빌드를 하고 생성된 결과물을 원격으로 전송... </summary> </entry> <entry><title>마크다운 문법 - Table</title><link href="https://brothersup.github.io/posts/2/" rel="alternate" type="text/html" title="마크다운 문법 - Table" /><published>2022-03-06T03:59:00+09:00</published> <updated>2022-03-06T03:59:00+09:00</updated> <id>https://brothersup.github.io/posts/2/</id> <content src="https://brothersup.github.io/posts/2/" /> <author> <name>{"name"=>"신형섭", "link"=>"https://github.com/brothersup"}</name> </author> <category term="study" /> <category term="markdown" /> <summary> 자주써서 익숙한 문법들 말고 가끔써서 익숙하지 않아서 자꾸 찾아보게 되는 것들 위주로 정리할 예정이다. 일단 이번 포스팅에선 테이블에 대해 정리했다. 부족한 내용은 나중에 새로 알게되는대로 추가하도록 하겠다. Table 기본문법 파이프(|)와 하이픈(-)을 사용해서 테이블을 만들 수 있다. 파이프는 열을 구분할 때 사용되고, 하이픈은 컬럼의 헤더를 구분할 때 사용된다(하이픈은 세개나 그 이상 붙여서 사용). 셀 너비는 굳이 맞춰서 작성하지 않아도 출력시 동일하게 표현된다. 특수문자를 표현할 때 HTML 문자코드를 사용할 수 있다. (테이블뿐 아니라 일반 구문에서도 가능) ex) | -&amp;gt; &amp;amp;#124; 문법 | 포지션 | ID ... </summary> </entry> <entry><title>자바 입출력 - Scanner, BufferedReader, BufferedWriter</title><link href="https://brothersup.github.io/posts/1/" rel="alternate" type="text/html" title="자바 입출력 - Scanner, BufferedReader, BufferedWriter" /><published>2022-03-05T17:53:00+09:00</published> <updated>2022-03-05T17:53:00+09:00</updated> <id>https://brothersup.github.io/posts/1/</id> <content src="https://brothersup.github.io/posts/1/" /> <author> <name>{"name"=>"신형섭", "link"=>"https://github.com/brothersup"}</name> </author> <category term="study" /> <category term="java" /> <summary> 최근 알고리즘공부를 시작하면서 몰랐거나 안써본 클래스들에 대해 많이 알게되었는데 그중에 하나가 콘솔로 입력값을 받는것이었다. 예전에 학교에서 C언어를 배울때 scanf 함수를 써서 입력값을 받았던게 생각나서 검색해보니 자바에도 Scanner라는 클래스가 있어서 Scanner로 입력을 받다가, BufferedReader 클래스로도 입력을 받을 수 있다는 것을 알게되었다. 성능이 더 좋다고 해서 그 뒤로는 BufferedReader를 사용해서 입력값을 받고있는데, BufferedWriter도 세트처럼 쓰는 것 같아서 출력시 함께 사용중이다. 그래서 쓰고있는 김에 복습도 할겸 정리해두려고 한다. Scanner java.util 패키지에 있는 클래스 입력받은 값을 문자나 정수, 실수, 문자열... </summary> </entry> </feed>
